---
AWSTemplateFormatVersion: "2010-09-09"
Description: "Lightw3ight Kubernetes Cluster"


Parameters:
  VPC:
    Type: AWS::EC2::VPC::Id

  MasterSubnet:
    Type: AWS::EC2::Subnet::Id

  MasterAZ:
    Type: AWS::EC2::AvailabilityZone::Name

  NodeSubnets:
    Type: List<AWS::EC2::Subnet::Id>

  SSHKeyPair:
    Type: AWS::EC2::KeyPair::KeyName

  AMIId:
    Type: AWS::EC2::Image::Id
    Default: ami-0c1d8842b9bfc767c

  NodeCount:
    Type: Number
    Default: 3


Outputs:
  ClusterDataVolume:
    Value: !Ref KubeMasterDataVolume

  ClusterAdminPasswordSSMPath:
    Value: !Sub /lw/${AWS::StackName}/admin-passwd

  ClusterCACertSSMPath:
    Value: !Sub /lw/${AWS::StackName}/ca-cert

  ClusterAPIEndpoint:
    Value: !Sub "https://${KubeMasterIP}:6443"

  InternalClusterAPIEndpoint:
    Value: !Join
      - ""
      -
        - "https://"
        - !GetAtt KubeMasterNetworkInterface.PrimaryPrivateIpAddress
        - ":6443"


Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Network Configuration
        Parameters:
          - VPC
          - MasterSubnet
          - MasterAZ
          - NodeSubnets

      - Label:
          default: Cluster Configuration
        Parameters:
          - SSHKeyPair


Resources:
  KubeMasterIamRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub lw.master.${AWS::StackName}
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: !Sub "/lw/${AWS::StackName}/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
      Policies:
      - PolicyName: ec2
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
              - ec2:AttachNetworkInterface
              - ec2:AttachVolume
            Resource: "*"
          - Effect: Allow
            Action:
              - ssm:GetParameter
              - ssm:PutParameter
              - ssm:GetParametersByPath
            Resource:
              - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/lw/${AWS::StackName}"
              - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/lw/${AWS::StackName}/*"
      - PolicyName: ebs-csi
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
              - "ec2:AttachVolume"
              - "ec2:CreateSnapshot"
              - "ec2:CreateTags"
              - "ec2:CreateVolume"
              - "ec2:DeleteSnapshot"
              - "ec2:DeleteTags"
              - "ec2:DeleteVolume"
              - "ec2:DescribeInstances"
              - "ec2:DescribeSnapshots"
              - "ec2:DescribeTags"
              - "ec2:DescribeVolumes"
              - "ec2:DetachVolume"
            Resource: "*"

  # IngressLoadBalancer:
  #   Type: AWS::ElasticLoadBalancingV2::LoadBalancer
  #   Properties:
  #     IpAddressType: ipv4
  #     LoadBalancerAttributes:
  #       - LoadBalancerAttribute
  #     Name: !Sub "lw.ingress.${AWS::StackName}"
  #     Scheme: internet-facing
  #     SecurityGroups:
  #       - String
  #     SubnetMappings:
  #       - SubnetMapping
  #     Subnets:
  #       - String
  #     Tags:
  #       - Tag
  #     Type: network

  KubeMasterIamInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/lw/${AWS::StackName}/"
      Roles:
        - !Ref KubeMasterIamRole

  KubeMasterSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub Lightweight cluster master for ${AWS::StackName}
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub lw.master.${AWS::StackName}
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '6443'
          ToPort: '6443'
          CidrIp: "0.0.0.0/0"
        - IpProtocol: tcp
          FromPort: '6443'
          ToPort: '6443'
          SourceSecurityGroupId: !Ref KubeNodesSecurityGroup

  KubeNodesSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub Lightweight cluster nodes for ${AWS::StackName}
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub lw.nodes.${AWS::StackName}

  KubeNodeFlannalAccessIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      FromPort: '8472'
      ToPort: '8472'
      IpProtocol: udp
      GroupId: !Ref KubeNodesSecurityGroup
      SourceSecurityGroupId: !Ref KubeNodesSecurityGroup
      Description: Flannel access node to node

  KubeMasterIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: standard

  KubeMasterNetworkInterface:
    Type: AWS::EC2::NetworkInterface
    Properties:
      Description: !Sub Network for Lightw3ight Cluster ${AWS::StackName}
      GroupSet:
        - !Ref KubeMasterSecurityGroup
      SecondaryPrivateIpAddressCount: 0
      SourceDestCheck: true
      SubnetId: !Ref MasterSubnet
      Tags:
        - Key: Name
          Value: !Sub lw.master.${AWS::StackName}

  BindKubeMasterNetworkToEIP:
    Type: AWS::EC2::EIPAssociation
    Properties:
      AllocationId: !GetAtt KubeMasterIP.AllocationId
      NetworkInterfaceId: !Ref KubeMasterNetworkInterface

  KubeMasterDataVolume:
    Type: AWS::EC2::Volume
    Properties:
      AvailabilityZone: !Ref MasterAZ
      Encrypted: true
      Size: 20
      Tags:
        - Key: Name
          Value: !Sub lw.master.data.${AWS::StackName}
      VolumeType: gp2

  KubeMasterLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      IamInstanceProfile: !Ref KubeMasterIamInstanceProfile
      ImageId: !Ref AMIId
      InstanceMonitoring: false
      InstanceType: "t3.large"
      KeyName: !Ref SSHKeyPair
      SecurityGroups:
        - !Ref KubeMasterSecurityGroup
      BlockDeviceMappings:
        - DeviceName: "/dev/xvda"
          Ebs:
            VolumeSize: "20"
            VolumeType: "gp2"
            DeleteOnTermination: true
      UserData:
        Fn::Base64: !Sub
          - |
            #!/bin/bash

            set -e

            exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1

            function cleanup {
              last_exit=$?
              /opt/aws/bin/cfn-signal \
                --exit-code $last_exit \
                --region ${AWS::Region} \
                --resource KubeMasterInstanceAutoscalingGroup \
                --stack ${AWS::StackName}
            }

            trap cleanup EXIT

            export INSTANCE_ID="$(curl http://169.254.169.254/latest/meta-data/instance-id)"
            export EIP_IP="${KubeMasterIP}"
            export AWS_REGION="${AWS::Region}"

            sleep 10

            aws ec2 attach-volume \
              --instance-id $INSTANCE_ID \
              --volume-id ${KubeMasterDataVolume} \
              --device /dev/xvdz \
              --region $AWS_REGION

            sleep 5

            lsblk -f /dev/xvdz | grep ext4 || mkfs.ext4 /dev/xvdz

            mkdir -p /var/lib/rancher/k3s
            mount /dev/xvdz /var/lib/rancher/k3s

            aws ec2 attach-network-interface \
              --instance-id $INSTANCE_ID \
              --network-interface-id ${KubeMasterNetworkInterface} \
              --device-index 1 \
              --region $AWS_REGION

            export INSTALL_K3S_EXEC="--disable-agent --tls-san=$EIP_IP --tls-san=${PrivateIP} --no-deploy=traefik --no-deploy=servicelb"
            export INSTALL_K3S_EXEC="$INSTALL_K3S_EXEC --kube-apiserver-arg=feature-gates=CSINodeInfo=true,CSIDriverRegistry=true,CSIBlockVolume=true --kube-apiserver-arg=allow-privileged=true"
            export INSTALL_K3S_BIN_DIR="/usr/bin"
            export INSTALL_K3S_VERSION="v0.6.1"

            curl -sfL https://get.k3s.io |  sh -
            aws ssm put-parameter --name /lw/${AWS::StackName}/node-token \
              --type SecureString \
              --value "$(cat /var/lib/rancher/k3s/server/node-token)" \
              --region $AWS_REGION \
              --overwrite
            aws ssm put-parameter --name /lw/${AWS::StackName}/admin-passwd \
              --type SecureString \
              --value "$(cat /var/lib/rancher/k3s/server/cred/passwd | grep admin | cut -d',' -f1)" \
              --region $AWS_REGION \
              --overwrite
            aws ssm put-parameter --name /lw/${AWS::StackName}/ca-cert \
              --type SecureString \
              --value "$(cat /var/lib/rancher/k3s/server/tls/ca.crt | base64)" \
              --region $AWS_REGION \
              --overwrite


          - PrivateIP: !GetAtt KubeMasterNetworkInterface.PrimaryPrivateIpAddress

  KubeMasterInstanceAutoscalingGroup:
    DependsOn: BindKubeMasterNetworkToEIP
    Type: "AWS::AutoScaling::AutoScalingGroup"
    CreationPolicy:
      AutoScalingCreationPolicy:
        MinSuccessfulInstancesPercent: 100
      ResourceSignal:
        Count: 1
        Timeout: PT10M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: 0
        MaxBatchSize: '1'
        WaitOnResourceSignals: true
        PauseTime: PT10M
    Properties:
      AutoScalingGroupName: !Sub lw.master.${AWS::StackName}
      DesiredCapacity: 1
      MinSize: 1
      MaxSize: 1
      LaunchConfigurationName: !Ref KubeMasterLaunchConfiguration
      Tags:
        - Key: Name
          Value: !Sub lw.master.${AWS::StackName}
          PropagateAtLaunch: true
        - Key: LightweightCluster
          Value: true
          PropagateAtLaunch: true
        - Key: KubernetesCluster
          Value: !Sub ${AWS::StackName}
          PropagateAtLaunch: true
        - Key: !Sub kubernetes.io/cluster/${AWS::StackName}
          Value: true
          PropagateAtLaunch: true
        - Key: !Sub kubernetes.io/master
          Value: true
          PropagateAtLaunch: true
      TerminationPolicies:
        - OldestInstance
      VPCZoneIdentifier:
        - !Ref MasterSubnet

  KubeNodeLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      IamInstanceProfile: !Ref KubeMasterIamInstanceProfile
      ImageId: !Ref AMIId
      InstanceType: "t3.large"
      KeyName: !Ref SSHKeyPair
      SecurityGroups:
        - !Ref KubeNodesSecurityGroup
      BlockDeviceMappings:
        - DeviceName: "/dev/xvda"
          Ebs:
            VolumeSize: "20"
            VolumeType: "gp2"
            DeleteOnTermination: true
      UserData:
        Fn::Base64: !Sub
          - |
            #!/bin/bash

            set -e

            exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1

            function cleanup {
              last_exit=$?
              /opt/aws/bin/cfn-signal \
                --exit-code $last_exit \
                --region ${AWS::Region} \
                --resource KubeNodeInstanceAutoscalingGroup \
                --stack ${AWS::StackName}
            }

            trap cleanup EXIT

            mkdir -p /var/lib/kubelet/plugins_registry/

            export AWS_REGION="${AWS::Region}"

            export K3S_TOKEN="$(aws ssm get-parameter --name /lw/${AWS::StackName}/node-token --with-decryption --query 'Parameter.Value' --output text --region $AWS_REGION)"
            export INSTALL_K3S_BIN_DIR="/usr/bin"
            export INSTALL_K3S_VERSION="v0.6.1"
            export INSTALL_K3S_EXEC="--kubelet-arg=feature-gates=CSINodeInfo=true,CSIDriverRegistry=true,CSIBlockVolume=true --kubelet-arg=allow-privileged=true"
            export K3S_URL="https://${PrivateIP}:6443"

            curl -sfL https://get.k3s.io |  sh -


          - PrivateIP: !GetAtt KubeMasterNetworkInterface.PrimaryPrivateIpAddress

  KubeNodeInstanceAutoscalingGroup:
    DependsOn: KubeMasterInstanceAutoscalingGroup
    Type: "AWS::AutoScaling::AutoScalingGroup"
    CreationPolicy:
      AutoScalingCreationPolicy:
        MinSuccessfulInstancesPercent: 100
      ResourceSignal:
        Count: !Ref NodeCount
        Timeout: PT10M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: 2
        MaxBatchSize: '2'
        WaitOnResourceSignals: true
        PauseTime: PT10M
    Properties:
      AutoScalingGroupName: !Sub lw.nodes.${AWS::StackName}
      DesiredCapacity: !Ref NodeCount
      MinSize: 1
      MaxSize: !Ref NodeCount
      LaunchConfigurationName: !Ref KubeNodeLaunchConfiguration
      Tags:
        - Key: Name
          Value: !Sub lw.node.${AWS::StackName}
          PropagateAtLaunch: true
        - Key: LightweightCluster
          Value: true
          PropagateAtLaunch: true
        - Key: KubernetesCluster
          Value: !Sub ${AWS::StackName}
          PropagateAtLaunch: true
        - Key: !Sub kubernetes.io/cluster/${AWS::StackName}
          Value: true
          PropagateAtLaunch: true
        - Key: !Sub kubernetes.io/node
          Value: true
          PropagateAtLaunch: true
      TerminationPolicies:
        - OldestInstance
      VPCZoneIdentifier: !Ref NodeSubnets
